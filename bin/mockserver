#!/usr/bin/env node

/*

   Copyright 2015 Telefonica Investigaci√≥n y Desarrollo, S.A.U

   This file is part of Tartare.

   Tartare is free software: you can redistribute it and/or modify it under the
   terms of the Apache License as published by the Apache Software Foundation,
   either version 2.0 of the License, or (at your option) any later version.
   Tartare is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the Apache License for more details.

   You should have received a copy of the Apache License along with Tartare.
   If not, see http://www.apache.org/licenses/LICENSE-2.0

   For those usages not covered by the Apache License please contact with:
      joseantonio.rodriguezfernandez@telefonica.com

 */

'use strict';

/* eslint-disable no-process-exit */

var optimist = require('optimist'),
    util = require('util'),
    fs = require('fs');

var argv = optimist
  .usage('\nUsage: apimockserver -a <admin_port>\n' +
         '         [-p <port>]\n' +
         '         [-s <ssl_port> -k <key_file> -c <cert_file>]\n' +
         '         [-2 <2wayssl_port> -k <key_file> -c <cert_file> -w <ca_file>]')
  .options('a', {alias: 'admin-port', describe: 'Administration port', demand: true})
  .options('p', {alias: 'port', describe: 'API Mock Server port (HTTP)'})
  .options('s', {alias: 'ssl-port', describe: 'API Mock Server port (HTTPS)'})
  .options('2', {alias: '2wayssl-port', describe: 'API Mock Server port (2waySSL)'})
  .options('k', {alias: 'key', describe: 'Private key file for HTTPS/2waySSL server'})
  .options('c', {alias: 'cert', describe: 'Certificate file for HTTPS/2waySSL server'})
  .options('w', {alias: 'ca', describe: 'Authority certificate file for 2waySSL server'})
  .options('t', {alias: 'timeout', describe: 'Server timeout in ms (default: 2 min)'})
  .argv;

if (!(argv.p || argv.s || argv['2'])) {
  console.error('ERROR: At least one server (HTTP, HTTPS, 2waySSL) port must be indicated');
  optimist.showHelp();
  process.exit(1);
}

if ((argv.a && typeof argv.a !== 'number') ||
    (argv.p && typeof argv.p !== 'number') ||
    (argv.s && typeof argv.s !== 'number') ||
    (argv['2'] && typeof argv['2'] !== 'number') ||
    (argv.w && util.isArray(argv.w)) ||
    (argv.t && typeof argv.t !== 'number') ||
    (argv.s && !(argv.k && argv.c)) ||  // k and c are mandatory when s exists
    (argv['2'] && !(argv.k && argv.c && argv.w))) {  // k, c and w are mandatory when 2 exists
  optimist.showHelp();
  process.exit(1);
}

if (argv.s && argv['2']) {
  if (!(util.isArray(argv.k) && argv.k.length === 2 && util.isArray(argv.c) && argv.c.length === 2)) {
    optimist.showHelp();
    process.exit(1);
  }
} else if (argv.s || argv['2']) {
  if (util.isArray(argv.k) || util.isArray(argv.c)) {
    optimist.showHelp();
    process.exit(1);
  }
  argv.k = [argv.k];
  argv.c = [argv.c];
}

var settings = {};
settings.admin = {port: argv.a};
if (argv.p) {
  settings.http = {port: argv.p};
}
if (argv.s) {
  settings.https = {
    port: argv.s,
    key: fs.readFileSync(argv.k[0], 'utf8'),
    cert: fs.readFileSync(argv.c[0], 'utf8')
  };
}
if (argv['2']) {
  settings.twoWaySsl = {
    port: argv['2'],
    key: fs.readFileSync(argv.k[1] || argv.k[0], 'utf8'),
    cert: fs.readFileSync(argv.c[1] || argv.c[0], 'utf8'),
    ca: fs.readFileSync(argv.w, 'utf8')
  };
}
if (argv.t) {
  settings.timeout = argv.t;
}

var mock = require('../').createServer(settings);

mock.start(function(err) {
  if (err) {
    console.error('Mock ERROR' + (err.serverName ? ' in server ' + err.serverName : '') + ':');
    console.error(err.stack);
    process.exit(100);
  }
  console.log('Mock listening on ports:');
  console.log('     Admin:', settings.admin.port);
  if (settings.http) {
    console.log('      HTTP:', settings.http.port);
  }
  if (settings.https) {
    console.log('     HTTPS:', settings.https.port);
  }
  if (settings.twoWaySsl) {
    console.log('   2waySSL:', settings.twoWaySsl.port);
  }
});

process.on('SIGINT', function() {
  mock.stop(function() {
    process.exit(0);
  });
});

process.on('SIGTERM', function() {
  mock.stop(function() {
    process.exit(0);
  });
});
